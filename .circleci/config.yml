version: 2.1
orbs:
  aws-cli: circleci/aws-cli@2.0.3
commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy environment 
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}  
jobs:
  create_infrastructure:
        docker:
          - image: amazon/aws-cli
        steps:
          - checkout
          - run:
              name: Create Cloudformation Stack
              command: |
                aws cloudformation deploy \
                  --template-file serverInfra.yml \
                  --stack-name infra-stack-${CIRCLE_WORKFLOW_ID:0:5} \
                  --region us-east-1
  get_hostname:
        docker:
          - image: amazon/aws-cli
        steps:
          - checkout
          - run:
              name: Create Cloudformation Stack
              command: |
                sudo aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text >> inventory             
  configure_infrastructure: 
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["91:ad:0f:d5:49:5d:8d:ee:59:9c:de:4b:b8:db:f4:3a"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible 
      - run:
          name: Configure server
          command: |
            ansible-playbook -i inventory main-remote.yml
  smoke_test:
    docker:
#      - image: alpine:latest
      - image: amazon/aws-cli
    steps:
#      - run: apk add --update curl
      - run:
          name: simulate error
          command: |
            return: 1
      - destroy_environment                    
workflows:
  configure_server:
      jobs:
        - create_infrastructure
        - get_hostname:
            requires:
              - create_infrastructure
        - configure_infrastructure:
            requires:
              - get_hostname
        - smoke_test:
            requires:
              - configure_infrastructure